#!/usr/bin/env python2
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
from __future__ import print_function
import rospy
import os
import json
import numpy as np
import random
import time
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from src.env import Env
from src.InitGoal import Respawn
#from keras.models import Sequential, load_model
#from keras.optimizers import RMSprop
#from keras.layers.core import Dense, Dropout, Activation

def EnvTest():
    '''print("In EnvTest")
    print(env.robotPosition_x)
    print(env.robotPosition_y)
    print(env.orientation_list)
    print(env.odom)
    print(env.lidar_scan)
    print(env.imu_data)
    print(env.imu_linearaccel)
    print(env.linear_accel_x)
    print(env.linear_accel_y)
    print(env.linear_accel_z)'''
    #act = [0.0,0.0]
    #env.pubAction_x_w(act)
    env.env_reset_test()
    #print(env.imu_data)
    #print(os.path.dirname(os.path.realpath(__file__)))
    respawn = Respawn()
    respawn.delete_goalModel()
    respawn.spawn_goalModel()
    print(respawn.goal_modelPath)
    
    #while True:
        #print(env.robotPosition_x)
        #print(env.robotPosition_y)
        #print(env.orientation_list)
        #print(env.odom)
        #print(env.lidar_scan)
        #print(env.imu_data)
        #print(env.imu_linearaccel)
        #print(env.linear_accel_x)
        #print(env.linear_accel_y)
        #print(env.linear_accel_z)
        

if __name__ == '__main__':
    '''Init ROS node'''
    rospy.init_node('pg_main')
    env = Env()
    EnvTest()
    



